{"version":3,"file":"static/js/959.1e37a596.chunk.js","mappings":"0KACA,G,QAA0B,0BAA1B,EAAkE,8BAAlE,EAA6G,4BAA7G,EAAkJ,wBAAlJ,EAAgL,qBAAhL,EAAgN,0B,SCKnMA,EAA8C,SAACC,GAExD,OACI,yBACKA,EAAMC,W,UCDNC,EAAwC,SAACF,GAElD,IAAIG,EAAO,YAAcH,EAAMI,GAC/B,OAAQ,gBAAKC,UAAWC,EAAe,IAAMA,EAArC,UACJ,UAAC,KAAD,CAASC,GAAIJ,EAAb,eAAoB,gBAAKE,UAAWC,EAAOE,IAAI,2EAA2EC,IAAK,UAAWT,EAAMU,KAAhJ,U,uCCLFC,GAAcC,EAAAA,EAAAA,GAAiB,IAmBxBC,GAAmBC,EAAAA,EAAAA,GAA+B,CAACC,KAAM,2BAAtCD,EAlBF,SAACd,GAC3B,OACI,kBAAMgB,SAAUhB,EAAMiB,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,GACXV,KAAK,iBACLW,YAAa,qBACbC,SAAU,CAACC,EAAAA,EAAUZ,QAGhC,0BACI,6C,8BCiBhB,GALyBa,EAAAA,EAAAA,KACrBC,EAAAA,EAAAA,KAboB,SAACC,GACrB,MAAO,CACHC,gBAAiBD,EAAME,eAGJ,SAACC,GACxB,MAAO,CACHC,YAAa,SAACC,GACVF,GAASG,EAAAA,EAAAA,GAAyBD,SAM1CE,EAAAA,EAFqBT,EClBF,SAACxB,GAGpB,IAAIkC,EAAmBlC,EAAM2B,gBAAgBQ,SAASC,KAAI,SAAAC,GAAC,OACvD,SAACtC,EAAD,CACaE,QAASoC,EAAEpC,SADNoC,EAAEjC,OAIpBkC,EAAiBtC,EAAM2B,gBAAgBY,QAAQH,KAAI,SAAAI,GAAE,OACrD,SAACtC,EAAD,CAAYQ,KAAM8B,EAAG9B,KAAMN,GAAIoC,EAAGpC,QAMtC,OACI,iBAAKC,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKgC,KAGL,gBAAKjC,UAAWC,EAAhB,UACI,yBAAM4B,OAEV,SAACrB,EAAD,CAAkBG,SAbJ,SAACyB,GACnBzC,EAAM8B,YAAYW,EAAOV,0B,iICjB3BW,EAAkB,SAAChB,GACrB,MAAO,CACHiB,OAAQjB,EAAMkB,KAAKD,SAIpB,SAASV,EAAyDY,GAUrE,OAAOpB,EAAAA,EAAAA,IAAQiB,EAARjB,EARmB,SAACzB,GACvB,IAAK2C,EAAwB3C,EAAxB2C,OAAWG,GAAhB,OAA6B9C,EAA7B,GAEA,OAAK2C,GAEE,SAACE,GAAD,UAAeC,KAFF,SAAC,KAAD,CAAUvC,GAAI","sources":["webpack://samurai-way/./src/Components/Dialogs/Dialogs.module.css?db5c","Components/Dialogs/Message/Message.tsx","Components/Dialogs/DialogItem/DialogsItem.tsx","Components/Dialogs/DialogForm/AddMessageForm.tsx","Components/Dialogs/DialogsContainer.tsx","Components/Dialogs/Dialogs.tsx","HOC/AuthRedirectComponent.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__T85VN\",\"dialogsItems\":\"Dialogs_dialogsItems__r6056\",\"nameDialog\":\"Dialogs_nameDialog__K7Vky\",\"active\":\"Dialogs_active__U7m7d\",\"img\":\"Dialogs_img__DmkzM\",\"messages\":\"Dialogs_messages__wz3e2\"};","import React from 'react';\r\n\r\ntype PropsMessageItemType = {\r\n    message: string\r\n}\r\n\r\nexport const MessageItem: React.FC<PropsMessageItemType> = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            {props.message}\r\n\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogPropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport const DialogItem: React.FC<DialogPropsType> = (props) => {\r\n\r\n    let path = '/dialogs/' + props.id;\r\n    return (<div className={s.nameDialog + ' ' + s.active}>\r\n        <NavLink to={path}> <img className={s.img} src=\"https://th.bing.com/th/id/OIP.Jwa9e-QJ36uwKdADWUaC5gHaEK?pid=ImgDet&rs=1\" alt={\"ninja\"}/>{props.name} </NavLink>\r\n    </div>)\r\n}\r\n\r\n","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {maxLengthCreator, required} from \"../../Utils/validators/validators\";\r\nimport {Textarea} from \"../../../Common/FormsControls/FormsControls\";\r\n\r\nexport type FormDataMessageType = {\r\n    newMessageBody: string;\r\n}\r\nconst maxLength30 = maxLengthCreator(30);\r\nexport const AddMessageForm = (props: InjectedFormProps<FormDataMessageType>) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       name='newMessageBody'\r\n                       placeholder={\"Enter your message\"}\r\n                       validate={[required, maxLength30]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n\r\n    );\r\n};\r\n\r\nexport const ReduxMessageForm = reduxForm<FormDataMessageType>({form: 'Dialog Add message Form'})(AddMessageForm)","import React from 'react';\r\nimport {dialogPageType, sendMessageActionCreator} from \"../../Redux/DialogsReducer\";\r\nimport {ReduxStateType} from \"../../Redux/reduxStore\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {AuthRedirectComponent} from \"../../HOC/AuthRedirectComponent\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    stateDialogPage: dialogPageType\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    sendMessage: (newMessage: string) => void\r\n}\r\n\r\nexport type CommonType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n\r\nconst mapStateToProps = (state: ReduxStateType): MapStateToPropsType => {\r\n    return {\r\n        stateDialogPage: state.dialogPage\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(sendMessageActionCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\nconst DialogsContainer = compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    AuthRedirectComponent\r\n)(Dialogs)\r\n\r\nexport default DialogsContainer\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport {MessageItem} from \"./Message/Message\";\r\nimport {DialogItem} from \"./DialogItem/DialogsItem\";\r\nimport {CommonType} from \"./DialogsContainer\";\r\nimport {ReduxMessageForm} from \"./DialogForm/AddMessageForm\";\r\n\r\n\r\n\r\ntype DialogsPropsType = CommonType & JSX.IntrinsicAttributes;\r\ntype ValuesType = {\r\n    newMessageBody: string;\r\n}\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n\r\n\r\n    let messagesElements = props.stateDialogPage.messages.map(m =>\r\n        <MessageItem key={m.id}\r\n                     message={m.message}\r\n        />)\r\n\r\n    let dialogElements = props.stateDialogPage.dialogs.map(el =>\r\n        <DialogItem name={el.name} id={el.id}/>)\r\n\r\n    const addNewMessage = (values: ValuesType) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogElements}\r\n            </div>\r\n\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n            </div>\r\n            <ReduxMessageForm onSubmit={addNewMessage}/>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import {Redirect} from \"react-router-dom\";\r\nimport React, {ComponentType} from \"react\";\r\nimport {ReduxStateType} from \"../Redux/reduxStore\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: ReduxStateType): mapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function AuthRedirectComponent<T extends JSX.IntrinsicAttributes>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: mapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n        return <Component {...restProps as T}/>\r\n\r\n    }\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}"],"names":["MessageItem","props","message","DialogItem","path","id","className","s","to","src","alt","name","maxLength30","maxLengthCreator","ReduxMessageForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","compose","connect","state","stateDialogPage","dialogPage","dispatch","sendMessage","newMessageBody","sendMessageActionCreator","AuthRedirectComponent","messagesElements","messages","map","m","dialogElements","dialogs","el","values","mapStateToProps","isAuth","auth","Component","restProps"],"sourceRoot":""}